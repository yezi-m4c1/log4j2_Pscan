package burp;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.lang.reflect.Parameter;
import java.util.*;
import java.util.List;


import java.net.URL;
import java.net.URLConnection;
import java.util.Map;


public class GUI implements IHttpListener {
    private JPanel main;
    private JCheckBox start;
    private JTextField payload;
    private JCheckBox spider;
    private JCheckBox target;
    private JCheckBox repeater;
    private JCheckBox scanner;
    private JCheckBox proxy;
    private JRadioButton dan;
    private JRadioButton digui;
    private IBurpExtenderCallbacks call;
    private IExtensionHelpers helpers;
    private Collection List;
    private boolean xuanze;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        main = new JPanel();
        main.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(10, 1, new Insets(0, 0, 0, 0), -1, -1));
        main.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        start = new JCheckBox();
        start.setText("start active scanning");
        panel1.add(start, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 5, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        proxy = new JCheckBox();
        proxy.setText("Proxy");
        panel2.add(proxy, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        target = new JCheckBox();
        target.setText("Target");
        panel2.add(target, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spider = new JCheckBox();
        spider.setText("Spider");
        panel2.add(spider, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scanner = new JCheckBox();
        scanner.setText("Scanner");
        panel2.add(scanner, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        repeater = new JCheckBox();
        repeater.setText("Repeater");
        panel2.add(repeater, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("payload:");
        panel4.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        payload = new JTextField();
        payload.setText("");
        panel3.add(payload, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel5, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel6, new GridConstraints(9, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel7, new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel8, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel9, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel10 = new JPanel();
        panel10.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel10, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel11 = new JPanel();
        panel11.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel11, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        dan = new JRadioButton();
        dan.setText("single");
        panel11.add(dan, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        digui = new JRadioButton();
        digui.setText("recursive");
        panel11.add(digui, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel12 = new JPanel();
        panel12.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        main.add(panel12, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel13 = new JPanel();
        panel13.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        main.add(panel13, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(digui);
        buttonGroup.add(dan);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return main;
    }

    public GUI(IBurpExtenderCallbacks call, IExtensionHelpers helpers) {
        this.call = call;
        this.helpers = helpers;
        dan.setSelected(true);
        xuanze = true;
        List = new Vector();
//        监听复选框是否被勾选，若被勾选，则开启监听，否则关闭监听
        start.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == 1) {
                    if (payload.getText().length() != 0) {
                        if (List.size() != 0) {
                            call.registerHttpListener(GUI.this::processHttpMessage);
                        } else {
                            start.setSelected(false);
                        }
                    } else {
                        start.setSelected(false);
                    }
                } else {
                    call.removeHttpListener(GUI.this::processHttpMessage);
                }
            }
        });


        proxy.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == 1) {
                    List.add(call.TOOL_PROXY);
                } else {
                    List.remove(call.TOOL_PROXY);
                    judgment();
                }
            }
        });
        target.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == 1) {
                    List.add(call.TOOL_TARGET);
                } else {
                    List.remove(call.TOOL_TARGET);
                    judgment();
                }
            }
        });
        spider.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == 1) {
                    List.add(call.TOOL_SPIDER);
                } else {
                    List.remove(call.TOOL_SPIDER);
                    judgment();
                }
            }
        });
        scanner.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == 1) {
                    List.add(call.TOOL_SCANNER);
                } else {
                    List.remove(call.TOOL_SCANNER);
                    judgment();
                }
            }
        });
        repeater.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == 1) {
                    List.add(call.TOOL_REPEATER);
                } else {
                    List.remove(call.TOOL_REPEATER);
                    judgment();
                }
            }
        });
        dan.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                xuanze = true;
            }
        });
        digui.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                xuanze = false;
            }
        });
    }

    public void judgment() {
        if (List.size() == 0) {
            start.setSelected(false);
            call.removeHttpListener(GUI.this::processHttpMessage);
        }
    }

    @Override
    public void processHttpMessage(int toolFlag, boolean messageIsRequest, IHttpRequestResponse messageInfo) {
        if (List.contains(toolFlag)) {
            if (messageIsRequest) {

                byte[] zijie = messageInfo.getRequest();
                IRequestInfo qingqiu = helpers.analyzeRequest(messageInfo.getHttpService(), zijie);
                java.util.List<IParameter> canshuliebiao = qingqiu.getParameters();
                java.util.List<String> heads = qingqiu.getHeaders();
                Map headers = headList(heads);
                String url = qingqiu.getUrl().getProtocol() + "://" + qingqiu.getUrl().getHost() + ":" + qingqiu.getUrl().getPort() + qingqiu.getUrl().getPath();

                if (xuanze) {
                    String Getpar = Getpars(canshuliebiao);
                    if (Getpar != "") {
                        url += "?" + Getpar;
                    }
                    if (qingqiu.getMethod() == "GET") {
                        String s = HttpRequest.sendGet(url, headers, call);
                    } else if (qingqiu.getMethod() == "POST") {
                        String pars = parsList(canshuliebiao);
                        String s = HttpRequest.sendPost(url, pars, headers, call);
                    }

                }else { //递归模式
                    if (qingqiu.getMethod() == "GET") {
                        Collection<IParameter> URLlist = GetURLList(canshuliebiao);
                        for (IParameter canshu : URLlist){
                            String Getcanshu = "?";
                            Getcanshu += canshu.getName()+"="+canshu.getValue()+payload.getText()+"&";
                            for (IParameter i : URLlist){
                                if (i != canshu){
                                    Getcanshu += i.getName()+"="+i.getValue()+"&";}
                            }
                            if (Getcanshu != "?") {
                                Getcanshu = Getcanshu.substring(0, Getcanshu.length() - 1);
//                                call.printOutput(Getcanshu);
                                String s = HttpRequest.sendGet(url+Getcanshu, headers, call);
                            }
                        }

                    } else if (qingqiu.getMethod() == "POST") {
                        Collection<IParameter> URLlist = GetURLList(canshuliebiao);
                        for (IParameter canshu : URLlist){
                            String Getcanshu = "?";
                            Getcanshu += canshu.getName()+"="+canshu.getValue()+payload.getText()+"&";
                            for (IParameter i : URLlist){
                                if (i != canshu){
                                    Getcanshu += i.getName()+"="+i.getValue()+"&";}
                            }
                            if (Getcanshu != "?") {
                                Getcanshu = Getcanshu.substring(0, Getcanshu.length() - 1);
//                                call.printOutput(Getcanshu);
                                String pars = GetparStr(canshuliebiao);
                                String s = HttpRequest.sendPost(url+Getcanshu,pars, headers, call);
                            }
                        }
                        if (GetBODYList(canshuliebiao).size() != 0){
                            for (IParameter i : GetBODYList(canshuliebiao)){
                                String canshu = "";
                                canshu += i.getName()+"="+i.getValue()+payload.getText()+"&";
                                for (IParameter a : GetBODYList(canshuliebiao)){
                                    if (a != i){
                                        canshu += a.getName()+"="+a.getValue()+"&";
                                    }
                                }
                                if (canshu != ""){
                                    canshu = canshu.substring(0,canshu.length()-1);
//                                    call.printOutput(canshu);
                                    if (GetparsStr(canshuliebiao) != "") {
                                        String s = HttpRequest.sendPost(url + GetparsStr(canshuliebiao), canshu, headers, call);
                                    }else {
                                        String s = HttpRequest.sendPost(url, canshu, headers, call);
                                    }
                                }
                            }
                        }else if (GetJSONList(canshuliebiao).size() != 0){
                            for (IParameter i : GetJSONList(canshuliebiao)){
//                                call.printOutput(i.getName() + " "+ i.getValue());
                                String canshu = "{";
                                canshu += i.getName()+":"+i.getValue()+payload.getText()+",";
//                                chongfu.add(i.getName());
                                for (IParameter a : GetJSONList(canshuliebiao)){
                                    if (a != i){
                                        canshu += a.getName()+":"+a.getValue()+",";
                                    }
                                }
                                if (canshu != "{"){
                                    canshu = canshu.substring(0,canshu.length()-1)+"}";
//                                    call.printOutput(canshu);
                                    if (GetparsStr(canshuliebiao) != "") {
                                        String s = HttpRequest.sendPost(url + GetparsStr(canshuliebiao), canshu, headers, call);
                                    }else {
                                        String s = HttpRequest.sendPost(url, canshu, headers, call);
                                    }
                                }
                            }
                        }


                    }
                }


            }
        }
    }


    public Collection<IParameter> GetBODYList(java.util.List<IParameter> canshulist){
        Collection liebiao = new ArrayList();
        for (IParameter i : canshulist){
            if (i.getType() == IParameter.PARAM_BODY){
                liebiao.add(i);
            }
        }
        return liebiao;
    }

    public Collection<IParameter> GetJSONList(java.util.List<IParameter> canshulist){
        Collection liebiao = new ArrayList();
        Collection chongfude = new ArrayList();
        for (IParameter i : canshulist){
            if (i.getType() == IParameter.PARAM_JSON){
                liebiao.add(i);
            }
        }
        Collection chongfu = new ArrayList();
        Map zidian = new HashMap();
        boolean panduan = false;
        for (Object i : liebiao) {
            if (!chongfu.contains(((IParameter)i).getName())) {
                chongfu.add(((IParameter)i).getName());
            } else {
                chongfude.add(((IParameter)i).getName());
                zidian.put(((IParameter)i).getName(),"[");
                panduan = true;
            }
        }
        Collection<IParameter> shuzu = new ArrayList();
        if (panduan){
            for (Object a : liebiao) {
                IParameter i = (IParameter) a;
                if (!chongfude.contains(i.getName())){
                    shuzu.add(i);
                }else {
                    zidian.put(i.getName(),zidian.get(i.getName())+i.getValue()+",");
                    shuzu.remove(i);
                }
            }
        }
        for (Object a :zidian.keySet()){
            String i = (String)a;
            zidian.put(a,((String)zidian.get(a)).substring(0,((String) zidian.get(a)).length()-1)+"]");
//            call.printOutput("aaa");
        }
        for (Object a : zidian.keySet()) {
            shuzu.add(helpers.buildParameter((String)a,(String)zidian.get(a),IParameter.PARAM_JSON));
        }
//        call.printOutput(String.valueOf(shuzu.size()));
        return shuzu;
    }

    public Collection<IParameter> GetURLList(java.util.List<IParameter> canshulist){
        Collection liebiao = new ArrayList();
        for (IParameter i : canshulist){
            if (i.getType() == IParameter.PARAM_URL){
                liebiao.add(i);
            }
        }
        return liebiao;
    }

    public Map headList(java.util.List<String> list1) {
        Map zidian = new HashMap();
        for (int i = 1; i < list1.size(); i++) {
            String[] shuzu = list1.get(i).replace("\n", "").split(":", 2);
            zidian.put(shuzu[0], shuzu[1]);
        }
        return zidian;
    }

    public String parsList(java.util.List<IParameter> canshuliebiao) {
        String zifuchuan = "";
        String jsonstr = "{";
        for (IParameter a : canshuliebiao) {
            if (a.getType() == IParameter.PARAM_BODY) {
                zifuchuan += a.getName() + "=" + a.getValue() + payload.getText() + "&";
            } else if (a.getType() == IParameter.PARAM_JSON) {
                jsonstr += a.getName() + ":" + a.getValue() + payload.getText() + ",";
            }
        }
        if (zifuchuan != "") {
            return zifuchuan.substring(0, zifuchuan.length() - 1);
        } else if (jsonstr != "{") {
            return jsonstr.substring(0, jsonstr.length() - 1) + "}";
        }
        return zifuchuan;
    }

    public String GetparStr(java.util.List<IParameter> canshuliebiao) {
        String zifuchuan = "";
        String jsonstr = "{";
        for (IParameter a : canshuliebiao) {
            if (a.getType() == IParameter.PARAM_BODY) {
                zifuchuan += a.getName() + "=" + a.getValue() + "&";
            } else if (a.getType() == IParameter.PARAM_JSON) {
                jsonstr += a.getName() + ":" + a.getValue()+ ",";
            }
        }
        if (zifuchuan != "") {
            return zifuchuan.substring(0, zifuchuan.length() - 1);
        } else if (jsonstr != "{") {
            return jsonstr.substring(0, jsonstr.length() - 1) + "}";
        }
        return zifuchuan;
    }



    public String Getpars(java.util.List<IParameter> canshuliebiao) {
        String results = "";
        for (IParameter a : canshuliebiao) {
            if (a.getType() == IParameter.PARAM_URL) {
                results += a.getName() + "=" + a.getValue() + payload.getText() + "&";
            }
        }
        if (results != "") {
            return results.substring(0, results.length() - 1);
        }
        return results;
    }
    public String GetparsStr(java.util.List<IParameter> canshuliebiao) {
        String results = "";
        for (IParameter a : canshuliebiao) {
            if (a.getType() == IParameter.PARAM_URL) {
                results += a.getName() + "=" + a.getValue() + "&";
            }
        }
        if (results != "") {
            return results.substring(0, results.length() - 1);
        }
        return results;
    }



}





class HttpRequest {
    /**
     * 向指定URL发送GET方法的请求
     *
     * @param url
     *            发送请求的URL
     * @return URL 所代表远程资源的响应结果
     */

    public static String sendGet(String url,Map headers,IBurpExtenderCallbacks call) {
        String result = "";
        BufferedReader in = null;
        try {
            String urlNameString = url;
            URL realUrl = new URL(urlNameString);
            // 打开和URL之间的连接
            URLConnection connection = realUrl.openConnection();
            // 设置通用的请求属性
            for (Object a : headers.keySet()){
                connection.setRequestProperty(a.toString(),headers.get(a.toString()).toString());
            }
            // 建立实际的连接
            connection.connect();
            // 获取所有响应头字段
            Map<String, List<String>> map = connection.getHeaderFields();
            // 遍历所有的响应头字段
            for (String key : map.keySet()) {
                System.out.println(key + "--->" + map.get(key));
            }
            // 定义 BufferedReader输入流来读取URL的响应
            in = new BufferedReader(new InputStreamReader(
                    connection.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
        } catch (Exception e) {
//            System.out.println("发送GET请求出现异常！" + e);
            call.printError("GETerr:"+e.toString());
            e.printStackTrace();
        }
        // 使用finally块来关闭输入流
        finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return result;
    }

    /**
     * 向指定 URL 发送POST方法的请求
     *
     * @param url
     *            发送请求的 URL
     * @return 所代表远程资源的响应结果
     */
    public static String sendPost(String url,String param,Map headers,IBurpExtenderCallbacks call) {
        PrintWriter out = null;
        BufferedReader in = null;
        String result = "";
        try {
            URL realUrl = new URL(url);
            // 打开和URL之间的连接
            URLConnection conn = realUrl.openConnection();
            // 设置通用的请求属性
            for (Object a : headers.keySet()){
                conn.setRequestProperty(a.toString(),headers.get(a.toString()).toString());
            }
            // 发送POST请求必须设置如下两行
            conn.setDoOutput(true);
            conn.setDoInput(true);
            // 获取URLConnection对象对应的输出流
            out = new PrintWriter(conn.getOutputStream());
            // 发送请求参数
            out.print(param);
            // flush输出流的缓冲
            out.flush();
            // 定义BufferedReader输入流来读取URL的响应
            in = new BufferedReader(
                    new InputStreamReader(conn.getInputStream()));
            String line;
            while ((line = in.readLine()) != null) {
                result += line;
            }
        } catch (Exception e) {
//            System.out.println("发送 POST 请求出现异常！"+e);
            call.printError("POSTerr:"+e.toString());
            e.printStackTrace();
        }
        //使用finally块来关闭输出流、输入流
        finally{
            try{
                if(out!=null){
                    out.close();
                }
                if(in!=null){
                    in.close();
                }
            }
            catch(IOException ex){
                ex.printStackTrace();
            }
        }
        return result;
    }
}
